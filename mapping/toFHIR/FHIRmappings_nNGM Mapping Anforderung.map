/// version = 0.1
/// title = "nNGM: Mapping Anforderung FHIR"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_AnforderungFHIR" = nNGM_Mapping_AnforderungFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target

group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';

    src -> bundle.entry as entry, 
           entry.resource = create('Specimen') as specimen 
           then TransformSpecimen(src, specimen);

    src -> bundle.entry as entry, 
           entry.resource = create('Observation') as observation 
           then TransformObservation(src, observation);
}

/* ------------------------------ Specimen ---------------------------- */

group TransformSpecimen(source src: CTS_Transport, target tgt: Specimen)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Patient/nNGM/patient'; 


    //tgt.type -> cc();

    //Needs patient resolver, patient id not in form 
    //patient.id as patientId -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patientId, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
    

        //Tumormaterial -> identifier.value
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2457'" then 
        {
            values.value as tumorid -> tgt.identifier = create('BackboneElement') as identifier, identifier.value = id(tumorid);
        };
    
        /Diagnostik Typ -> type
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1368'" then
        {
            //Entnahmedatum -> collection.collectedDateTime
            values.value as type where "$this = 'Gewebediagnostik': -> tgt.collection = create('BackboneElement') as collection, 
            collection.extension = as collectionextension, 
            collectionextension.url = , 
            collectionextension.value = 
            
            //Materialentnahme erfolgte -> colleciton.extension.valueCodeableConcept
            


        }; 

    

            //Entnahmedatum -> collection.collectedDateTime

            //Blutentnahme erfolgte -> collection.extension.valueCodeableConcept
    };
}


/* ------------------------------ Observation ---------------------------- */

group TransformObservationKoerpergroesse(source src: CTS_Transport, source patient: Patient, source context: EpisodeOfCare, target tgt: Observation)
{
    src log "'test'" -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/koerpergroesse';

    src -> tgt.status = 'final';
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'vital-signs', 'Vital Signs');
    src -> tgt.code = cc('http://loinc.org', '8302-2');

    src.operations as operations, operations.data as data then
    {
        // Körpergröße
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1133'" then
        {
            values.value as groesse -> tgt.value = create('Quantity') as value collate, value.value = groesse;
            src -> tgt.value as value collate, value.unit = 'cm';
            src -> tgt.value as value collate, value.code = 'cm';
            src -> tgt.value as value collate, value.system = 'http://unitsofmeasure.org';
        };
    };

    patient.id as patientId -> tgt.subject = create('Reference') as subject, 
    										 subject.reference = evaluate(patientId, '\'Patient/\' + $this');

    context.id as contextId -> tgt.context = create('Reference') as context, 
    									   context.reference = evaluate(contextId, '\'EpisodeOfCare/\' + $this');
}